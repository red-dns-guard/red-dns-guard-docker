require "dnsdistsinkhole"

sendsyslog(1000,"start")

addAction(AllRule(), LuaAction(preresolve))
---addAction(AllRule(), TeeAction("192.0.2.54"))
---getAction(0):printStats()

function myHealthCheck(qname, qtype, qclass, dh)
  dh:setCD(true)
  return newDNSName("a.root-servers.net"), DNSQType.AAAA , qclass
end

-- main resolver
newServer({address="127.0.0.1:531", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=1000})
newServer({address="127.0.0.1:532", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=1000})
newServer({address="127.0.0.1:533", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true,pool="",qps=1000})
--newServer({address="127.0.0.1:5353", qps=1000})

-- main filter backend fallback pool
newServer({address="127.0.0.1:5301", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true, qps=523 , pool="fallback" })
newServer({address="127.0.0.1:5302", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true, qps=523 , pool="fallback" })
newServer({address="127.0.0.1:5303", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true, qps=523 , pool="fallback" })

-- our own clean resolver
newServer({address="127.0.0.1:534", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true, qps=42 , pool="bypass" })
newServer({address="127.0.0.1:534", checkInterval=42,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=42})

---newServer({address="9.9.9.9:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=1000})

--anycast.censurfridns.dk in bypass , unicast in fallback
newServer({address="89.233.43.71:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=50})
newServer({address="[2a01:3a0:53:53::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=50})
newServer({address="91.239.100.100:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=50})
newServer({address="[2001:67c:28a4::]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=50})

----dns2.digitalcourage.de
newServer({address="[2a02:2970:1002::18]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=50})
newServer({address="46.182.19.48:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=50})
newServer({address="[2a02:2970:1002::18]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=50})
newServer({address="46.182.19.48:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=50})

--recursor01.dns.ipfire.org
newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=50})
newServer({address="[2001:678:b28::54]:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=50})
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="bypass",qps=50})
newServer({address="81.3.27.54:53", checkInterval=45,checkFunction=myHealthCheck, mustResolve=true,pool="fallback",qps=50})



setServerPolicy(firstAvailable)



--- Send queries to fallback poolas default
addAction(AllRule(), ContinueAction(PoolAction("fallback")))
--- Send queries to default pool when servers are available
addAction(PoolAvailableRule(""),ContinueAction( PoolAction("")))


setLocal('0.0.0.0:53',{reusePort=true})
setLocal('0.0.0.0:533',{reusePort=true})
controlSocket('127.0.0.1:5199')
webserver("0.0.0.0:80", "sqwe8<IJQ§(EJ§E89j")
setKey("sWWalOkXJH4cNVwyLaJdomJFOrkmi4l1av7R1fNsg40=")

-- For any IPv4 address and for any IPv6 /64, if traffic exceeds 10 QPS
-- immediately set TC bit on response causing fallback to TCP/IP
addAction(MaxQPSIPRule(10, 32, 64), TCAction())
---addAnyTCRule() -- do the same for all ANY queries

----This measures traffic per IPv4 address and per /48 of IPv6, and if traffic for such an address (range) exceeds 50 qps, it gets delayed by 50ms
addAction(MaxQPSIPRule(50, 32, 48), DelayAction(50))
addAction( QTypeRule(DNSQType.ANY) , DelayAction(50))

-- add 100 000 entry package cache
---pc = newPacketCache(1000000, 86400, 0, 60, 60)
---pc = newPacketCache(100000)
pc = newPacketCache(100000, {maxTTL=666, minTTL=0, temporaryFailureTTL=23, staleTTL=42, dontAge=false})
getPool(""):setCache(pc)

-- add 10000 entry package cache

bypc = newPacketCache(100000, {maxTTL=666, minTTL=0, temporaryFailureTTL=23, staleTTL=42, dontAge=false})
getPool("bypass"):setCache(bypc)
fbpc = newPacketCache(100000, {maxTTL=666, minTTL=0, temporaryFailureTTL=23, staleTTL=42, dontAge=false})
getPool("fallback"):setCache(fbpc)

setStaleCacheEntriesTTL(360)
-- cache 6m when backends are down

-- delay NXDOMAin for 30ms
addResponseAction(RCodeRule(DNSRCode.NXDOMAIN), DelayResponseAction(30))
-- delay NXDOMAIN cache hits for additional 25 ms
addCacheHitResponseAction(RCodeRule(DNSRCode.NXDOMAIN), DelayResponseAction(25))


--- FILTER SECTION
--------------addAction("0.8.e.f.ip6.arpa", SpoofAction({"127.0.0.1"}))

---addAction({'168.192.in-addr.arpa', '10.in-addr.arpa'},DropAction())

--ip6 link local reverse ptr
--addAction({'0.8.e.f.ip6.arpa'},DropAction())
addAction("1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa", SpoofCNAMEAction("ipv6-fe80.gateway"))
addAction("0.8.e.f.ip6.arpa", SpoofCNAMEAction("ip6.local.ptr.blocked"))

--ip4/6 localhost

addAction(AndRule({QNameRule('1.0.0.127.in-addr.arpa'), QTypeRule(DNSQType.PTR)}),SpoofCNAMEAction("localhost")) 
addAction({'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'}, SpoofCNAMEAction("localhost"))

---addAction(AndRule({QNameRule('1.0.0.127.in-addr.arpa.'), QTypeRule(DNSQType.PTR)}), SpoofRawAction("\009localhost\000"))
---addAction({'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'}, SpoofRawAction("\009localhost\000"))
-----addAction({'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'}, SpoofRawAction("\009ip6-localhost\000"))
---addAction({'0.8.e.f.ip6.arpa'}, SpoofRawAction("\009ip6.local.ptr.blocked\000"))

addAction(QTypeRule(DNSQType.PTR),PoolAction("bypass")) -- send remaining ptrs to clean upsream

addAction({'metric.gstatic.com'}, PoolAction("fallback")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

---addAction("h4xorbooter.xyz.", QPSAction(10))
addAction({'pool.ntp.org'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'my.nextdns.io','favicon.nextdns.io'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

addAction({'sourcehut.org', 'bitbucket.org'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'assets.gitlab-static.net', 'gitlab.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'media.githubusercontent.com','avatars.githubusercontent.com.','raw.githubusercontent.com', 'github.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'jsdelivr.com','glcdn.githack.com','gitcdn.xyz', 'cdnjs.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'youtube.googleapis.com','ajax.googleapis.com','ajax.cloudflare.com','fonts.gstatic.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'classify-client.services.mozilla.com','versioncheck-bg.addons.mozilla.org','services.addons.mozilla.org','ftp.mozilla.org','firefox.settings.services.mozilla.com','connectivity-check.ubuntu.com','connectivitycheck.gstatic.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'release.calyxinstitute.org','apt.syncthing.net','archive.canonical.com','s3.brave.com','debian.charite.de','deb.xanmod.org','download.virtualbox.org','kx.studio','linux.teamviewer.com','mirror.bauhuette.fh-aachen.de','ppa.launchpad.net','security.ubuntu.com','us.archive.ubuntu.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

addAction({'ocsp.digicert.com','lencr.org','letsencrypt.org','dnsprivacy.org','domainsproject.org', 'cdnjs.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
addAction({'staticcdn.duckduckgo.com','startpage.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool

addAction({'cdn.sstatic.net','sockets.stackexchange.com','stackexchange.com','askubuntu.com','superuser.com', 'serverfault.com'}, PoolAction("bypass")) -- Send all queries for "google.com." and "gitlab.com." to the "remote" pool
infolog("ready1")
sendsyslog(1000,"ready2")
